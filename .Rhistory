breaks
breaks <- quantile(x$V2, probs = seq(0,1, by=0.2000))
breaks
breaks <- quantile(x$V2, probs = seq(0,1, by=0.2))
breaks
simplified_merged_2 <- arrange(simplified_merged_2, rankGroups, V2)
simplified_merged_2 <- arrange(simplified_merged_2, rankGroups, V2)
View(simplified_merged_2)
cut2
setwd("../git_repos//GettingAndCleaningData")
list.files()
getwd()
source("run_analysis.R")
rm(list = ls())
source("run_analysis.R")
source("run_analysis.R")
View(averages_by_activity_and_subject_data_set)
dim(averages_by_activity_and_subject_data_set)
rm(list = ls())
setwd("./../../workspace_R/")
getwd()
list.files("^quizz")
list.files("^quizz*")
list.files()
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, "microSurvey2006Idaho.csv", method="curl")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FPUMSDataDict06.pdf"
download.file(fileUrl, "microSurvey2006Idaho_codebook.pdf", method="curl")
data <- read.csv("microSurvey2006Idaho.csv", stringsAsFactors = FALSE)
View(data)
dim(data)
data_names <- names(data)
tail(data_names, 20)
data_names <- tolower(data_names)
data_names
data_names <- names(data)
data_names
data_names <- tolower(data_names)
data_names
split_names <- strsplit(data_names, "wgtp")
split_names
split_names[123]
data_names[123]
rm(list = ls())
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl, "gdp_190.csv", method="curl")
data <- read.csv("gdp_190.csv", stringsAsFactors = FALSE)
rm(list = ls())
#csv - first 5 rows no data, no header
gdp_data <- read.csv("gdp_190.csv", header = FALSE, skip = 5, stringsAsFactors = FALSE)
View(gdp_data)
str(gdp_data$V5)
gdp_data$V5 <- as.numeric(gdp_data$V5)
View(gdp_data)
gdp_data <- read.csv("gdp_190.csv", header = FALSE, skip = 5, stringsAsFactors = FALSE)
View(gdp_data)
gdpValue <- gdp_data$V5
library(stringr)
gdpValue <- str_trim(gdpValue)
gdpValue
gdpValue <- gsub(",", "", gdpValue)
gdpValue
gdpValue <- as.numeric(gdpValue)
gdpValue
mean(gdpValue, na.rm = TRUE)
gdp_data$V2
rm(list=ls())
gdp_data <- read.csv("gdp_190.csv", header = FALSE, skip = 5, stringsAsFactors = FALSE)
View(gdp_data)
gdp_data$V2 <- as.numeric(gdp_data$V2)
View(gdp_data)
min_gdp_data <- gdp_data[,c("V1", "V2", "V5")]
View(min_gdp_data)
min_gdp_data <- min_gdp_data[which(min_gdp_data$V2 > 0),]
View(min_gdp_data)
str(min_gdp_data$V5) #char vector
gdpValue <- min_gdp_data$V5
gdpValue <- str_trim(gdpValue) ##Remove trimming
gdpValue <- gsub(",", "", gdpValue) ##Remove the commas
gdpValue <- as.numeric(gdpValue)
mean(gdpValue, na.rm = TRUE)
View(min_gdp_data)
View(gdp_data)
min_gdp_data <- gdp_data[,c("V1", "V2", "V4")]
View(min_gdp_data)
min_gdp_data <- min_gdp_data[which(min_gdp_data$V2 > 0),]
min_gdp_data <- gdp_data[,c("V1", "V2", "V4")]
min_gdp_data <- min_gdp_data[which(min_gdp_data$V2 > 0),]
View(min_gdp_data)
grep("^United", min_gdp_data$V4)
min_gdp_data$V4[9]
min_gdp_data$V4[99]
min_gdp_data$V4[186]
min_gdp_data$V4[c(1,6,32)]
rm(list = ls())
fileGDP <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
fileEDU <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileGDP, "gdp.csv", method = "curl")
download.file(fileEDU, "edu.csv", method = "curl")
#csv with a header
edu_data <- read.csv("edu.csv", stringsAsFactors = FALSE)
#csv - first 5 rows no data, no header
gdp_data <- read.csv("gdp.csv", header = FALSE, skip = 5, stringsAsFactors = FALSE)
View(gdp_data)
View(edu_data)
gdp_data$V2 <- as.numeric(gdp_data$V2)
min_gdp_data <- gdp_data[,c("V1", "V2")]
min_gdp_data <- min_gdp_data[which(min_gdp_data$V2 > 0),]
View(min_gdp_data)
min_edu_data <- edu_data[,c("CountryCode", "Long.Name", "Special.Notes")]
View(min_edu_data)
View(min_edu_data)
mergedDataSet <- merge(mini_edu_data, min_gdp_data, by.x = "CountryCode", by.y = "V1", all = FALSE)
min_edu_data <- edu_data[,c("CountryCode", "Long.Name", "Special.Notes")]
View(min_edu_data)
mergedDataSet <- merge(mini_edu_data, min_gdp_data, by.x = "CountryCode", by.y = "V1", all = FALSE)
mergedDataSet <- merge(min_edu_data, min_gdp_data, by.x = "CountryCode", by.y = "V1", all = FALSE)
View(mergedDataSet)
mergedDataSet$Special.Notes[16] ##Example of teh string we are looking for
grep("^Fiscal year end:", mergedDataSet$Special.Notes)
res <- mergedDataSet[grep("^Fiscal year end:", mergedDataSet$Special.Notes),]
View(res)
length(grep("^Fiscal year end: [j|J]une", res$Special.Notes))
res1 <- res[grep("^Fiscal year end: [j|J]une", res$Special.Notes),]
View(res1)
rm(list = ls())
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
View(amzn)
sampleTimes = index(amzn)
?quantmod
?index
str(amzn)
summary(amzn)
class(amzn$Index)
amzn[1]
sampleTimes = index(amzn)
sampleTimes
class(sampleTimes)
?Date
sampleTimes[1]
ex <- sampleTimes[1]
years(ex)
year(ex)
months(ex)
attributes(ex)
format(ex, "%Y")
mode(format(ex, "%Y"))
sampleTimeYears <- format(sampleTimes, "%Y")
which(sampleTimeYears == "2012")
length(which(sampleTimeYears == "2012"))
length(which(format(sampleTimes, "%Y") == "2012")) ##How many measures were colelcted in 2012?
length(which(format(sampleTimes, "%Y") == "2012" & weekdays(sampleTimes) == "Monday")) ##How many measures were colelcted in 2012?
res_2012 <- sampleTimes[which(format(sampleTimes, "%Y") == "2012"] ##How many measures were colelcted in 2012?
res_2012 <- sampleTimes[which(format(sampleTimes, "%Y") == "2012")]
res_2012
weekdays(res_2012)
sum(weekdays(res_2012) == "mandag"
)
x <- c(0.5, 0.6) ##numeric
class(x)
x <- c(TRUE, FALSE) ##logic
x <- c("a", "b", "c") ##character
x <- c(1, 2, 3)
class(x)
x <- c(0.5, 0.6) ##numeric
class(x); typeof(x)
x <- c(TRUE, FALSE) ##logic
x <- c("a", "b", "c") ##character
x <- c(1, 2, 3)
class(x); typeof(x)
##Using the vector() function
x <- vector(mode = "numeric", length = 10)
x ##default value is 0
x <- vector(mode = "logic", length = 10)
x ##default value is FALSE
##Using the vector() function
x <- vector(mode = "numeric", length = 10)
x ##default value is 0
x <- vector(mode = "logical", length = 10)
x ##default value is FALSE
##Removing elements from a vector
x <- c(1,2,3,4,5)
y <- c(x[1:2], x[4:5]) ##create a new vector from x adding new elements
x; y
##Adding element to a vector
x <- c(1,2,3,4,5)
y <- c(x, 6,7,8) ##create a new vector from x adding new elements
x; y
first1 <- function(x){
for(i in 1:length(x)){
if(x[i] == 1) break
}
return i
}
first1 <- function(x){
for(i in 1:length(x)){
if(x[i] == 1) break
}
return(i)
}
first1(c(2,3,4,5,1))
x <- c() ##an empty vector
x ##content of x
length(x) ##length of the empty vector
##What does it happen if we create a vector using
1:length(x)
x <- 1:20
class(x); typeof(x)
x <- 1:20
x
class(x); typeof(x)
##Using the : operator to create integer vector
x <- 1:20
x
class(x); typeof(x)
x <- pi:5
x
class(x); typeof(x)
##Using the : operator to create integer vector
x <- 1:20
x
class(x); typeof(x)
x <- pi:7
x
class(x); typeof(x)
##Using the : operator to create integer vector
x <- 1:5
x
class(x); typeof(x)
x <- pi:7
x
class(x); typeof(x)
example(seq)
x <- seq(1, 9, by = 2)     # matches 'end'
class(x); typeof(x);
x <- seq(1, 9, by = 2)     # matches 'end'
class(x); typeof(x);
x <- seq(10)
class(x); typeof(x);
##Using the seq() function
x <- seq(1, 9, by = 2)     # matches 'end'
class(x); typeof(x);
x <- seq(10)
class(x); typeof(x);
x <- seq(from = 1, to = 9)     # matches 'end'
class(x); typeof(x);
##Recycling
c(1,2,3,4) + c(10,20)
c(1,2,3,4) + c(10,20)
###Arithmetic Operations: element-based, 1st element with 1st element .. etc
x <- c(10,20,30)
y <- c(1,2,3)
x + y
x * y
x / y
### Subsetting
x <- c(1,2,3,4,5,6,7,8,9,10,11,12,13)
x[c(1,3)] #A new vector of 2 elements, the 1st & 3rd
indices <- c(2:3)
indices
### Subsetting
x <- c(1,2,3,4,5,6,7,8,9,10,11,12,13)
x[c(1,3,1,3)] #A new vector of 4 elements, the 1st & 3rd, & the 1st & 3rd
x[2:3] #A new vector of 2 elements, the 2nd & 3rd
indices <- c(2:3)
x[indices]
x[-1] #All except the 1st element
x[-length(x)] #All except the last
x[-c(1:10)] #All except the first 10 elements
?Syntax
##An approach when delaing with vector is to use seq()
x <- c(1,2,3)
for(i in seq(x)) print i
x <- c()
for(i in seq(x)) print i
##An approach when delaing with vector is to use seq()
x <- c(1,2,3)
for(i in seq(x)) print(i)
x <- c()
for(i in seq(x)) print(i)
##Using rep() to create a new vector
rep(1:4, times = 2)
rep(1:4, each = 2)
rep(1:4, each = 2, len = 4)    # first 4 only.
rep(1:4, each = 2, len = 10)   # 8 integers plus two recycled 1's.
rep(1:4, each = 2, times = 3)  # length 24, 3 complete replications
##all() & any()
x <- 1:10
any(x > 5)
any(x > 88)
all(x > 10)
all(x > 0)
x <- c(x, NA, 12,13)
any(x > 5)
all(x > 10)
x <- 1:10
x > 5
install.packages("RMySQL")
install.packages(c("codetools", "rmarkdown"))
install.packages(c("devtools", "knitr", "manipulate"))
install.packages(c("curl", "Matrix"))
install.packages(c("cluster", "Rcpp"))
##1st example
x <- 1:4
y <- 2:5
x > Y ##">" is a vectorized function
">"(x,y)
##1st example
x <- 1:4
y <- 2:5
x > y ##">" is a vectorized function
">"(x,y)
##1st example
x <- 1:4 # Vector x
y <- 2:5 # Vector y
x > y
## ">" is a vectorized function
## ">" is applied to: x[1] y[1], x[2] y[2], etc
">"(x,y) ## Same as before
x <- 1:10
incrementMe <- function(x){return(x + 1)}
increementMe(x)
##2nd example
x <- 1:10
incrementMe <- function(x){return(x + 1)}
incrementMe(x)
##2nd example
x <- 1:10
x
incrementMe <- function(x){return(x + 1)}
incrementMe(x)
##2nd example
x <- 1:10
x
incrementMe <- function(x){return(x + 1)}
## incrementMe uses just vectorized operations `+`
incrementMe(x)
## "+" is vectorized? Verify it
x <- 1:4 # Vector x
y <- 2:5 # Vector y
x + y
## Another example
sqrt(x) ## vectorized function - see how it is applied to each element
## Another example
x
sqrt(x) ## vectorized function - see how it is applied to each element
## Another example
x <- 1:3
c <- 1
f <- funtion(x,c){return (x+c)^2}
f(x, c)
## When applying the function the following is happeneing behind teh scenes
## 1. recycling
##      c from 1 -> 1,1,1 (in order to have the same length as x)
##      2 from 2 -> 2,2,2 ((in order to have the same length as x and c)
## 2. vectorizing
## Another example
x <- 1:3
c <- 1
f <- function(x,c){return (x+c)^2}
f(x, c)
## When applying the function the following is happeneing behind teh scenes
## 1. recycling
##      c from 1 -> 1,1,1 (in order to have the same length as x)
##      2 from 2 -> 2,2,2 ((in order to have the same length as x and c)
## 2. vectorizing
## Another example
x <- 1:3
c <- 1
f <- function(x,c){return((x+c)^2)}
f(x, c)
## When applying the function the following is happeneing behind teh scenes
## 1. recycling
##      c from 1 -> 1,1,1 (in order to have the same length as x)
##      2 from 2 -> 2,2,2 ((in order to have the same length as x and c)
## 2. vectorizing
## Another example
x <- 1:3
c <- 1
e <- rep(2, times = 2)
f <- function(x,c,e){return((x+c)^e)}
f(x, c, e)
## Another example
x <- 1:3
c <- 1:3
e <- 1:3
f <- function(x,c,e){return((x+c)^e)}
f(x, c, e)
x <- c(1:3, NA, 4:7)
x
is.na(x)
x <- c(1:3, NaN, 4:7)
x
is.na(x)
x <- c(1:3, NaN, 4:7)
x
is.nan(x)
x <- c(1:3, NA, 4:7)
x == NA
?"="
x <- c(1:3, NA, 4:7)
x == 1
x <- c(1, 2, NaN, NA, 4)
x
is.na(x)
is.nan(x)
## NAs with different modes
x <- c(1, NA)
y <- c("a", NA)
x;y
mode(x[2]); class(x[2]); typeof(x[2])
mode(y[2]); class(y[2]); typeof(y[2])
x <- (1,2,3, NaN)
mean(x) ## By default uses all values so
mean(x, na.rm = T) ## Instructed to remove `Na`s (`NA` and `NaN`)
x <- c(1,2,3, NaN)
mean(x) ## By default uses all values so
mean(x, na.rm = T) ## Instructed to remove `Na`s (`NA` and `NaN`)
x <- c(NA, 1,2,3, NaN)
mean(x) ## By default uses all values so
mean(x, na.rm = T) ## Instructed to remove `Na`s (`NA` and `NaN`)
x <- NULL
is.null(x)
x <- c(1,2,3,NULL)
is.null(x)
x <- NULL
is.null(x)
##is.null() is not a vectorized function (be careful)
x <- c(1,2,3,NULL)
is.null(x)
## NULL vs. NA
x <- NULL
length(x)
y <- NA
length(y)
##Using NULL to cbuild a vector
x <- NULL
for (i in 1:3) x <- c(x, i)
x
quit()
install.packages(c("boot", "caret", "chron", "class", "cluster", "codetools", "colorspace", "curl", "devtools", "dplyr", "e1071", "evaluate", "foreign", "formatR", "Formula", "gdata", "geosphere", "ggmap", "ggplot2", "gplots", "gtools", "highr", "Hmisc", "httpuv", "httr", "jsonlite", "KernSmooth", "knitr", "lattice", "lme4", "manipulate", "mapproj", "maps", "markdown", "MASS", "Matrix", "mgcv", "mime", "nlme", "NLP", "nnet", "plyr", "pryr", "quantmod", "quantreg", "R6", "Rcpp", "RCurl", "rJava", "rmarkdown", "RMySQL", "ROCR", "roxygen2", "rpart", "rstudioapi", "scales", "sp", "SparseM", "spatial", "stringi", "stringr", "survival", "testthat", "tm", "TTR", "XML"))
install.packages(c("data.table", "devtools", "evaluate", "formatR", "highr", "Hmisc", "jsonlite", "lme4", "maps", "randomForest", "Rcpp", "rpart.plot", "tidyr"))
version
git -version
installed.packages()
head(installed.packages())
head(installed.packages("knitr"))
grep("knitr", installed.packages())
installed.packages()[grep("knitr", installed.packages()),]
installed.packages()[57,]
library(knitr)
?par
library(xtable)
install.packages(xtable)
install.packages("xtable")
setwd("~/courseraSpecialization/git_repos/StatisticalInferenceCourse")
data(mtcars)
str(mtcars)
sampleMean <- mean(mtcars$mpg)
sampleSd <- sd(mtcars$mpg)
n <- length(mtcars$mpg)
#intervals
sampleMean + c(-1,1) * qt(0.975,n) * (sampleSd / sqrt(n))
t.test(mtcars$mpg)
round(sampleMean + c(-1,1) * qt(0.975,n) * (sampleSd / sqrt(n)))
round(t.test(mtcars$mpg)$conf.int)
x <- t.test(mtcars$mpg)
str(x)
sampleMean <- (1 / sqrt(n)) * qt(0.975,n)
n <- 9 #obs.
sampleMean <- (1 / sqrt(n)) * qt(0.975,n)
sampleMean
(1 / sqrt(n)) * qt(0.975,n-1)
data(mtcars)
attach(mtcars)
data <- mpg
group1 <- data[data == 4]
group1 <- data[data == 6]
data <- mtcars$mpg
group1 <- mtcars$mpg[mtcar$cyl == 4]
group1 <- data[mtcar$cyl == 6]
group1 <- mtcars$mpg[mtcars$cyl == 4]
group1 <- mtcars$mpg[mtcars$cyl == 4]
group1 <- mtcars$mpg[mtcars$cyl == 6]
t.test(g1,g2, paired = FALSE, var.equal = TRUE)
group1 <- mtcars$mpg[mtcars$cyl == 4]
group2 <- mtcars$mpg[mtcars$cyl == 6]
t.test(group1,group2, paired = FALSE, var.equal = TRUE)
group1 <- mtcars$mpg[mtcars$cyl == 4]
group2 <- mtcars$mpg[mtcars$cyl == 6]
str(t.test(group1,group2, paired = FALSE, var.equal = TRUE))
t.test(group1,group2, paired = FALSE, var.equal = TRUE)$conf.int
round(t.test(group1,group2, paired = FALSE, var.equal = TRUE)$conf.int, 1)
n_g1 <- 9
n_g2 <- 9
sampleMeanDiff_g1 <- 3
sampleMeanDiff_g2 <- 1
sampleSdDiff_g1 <- 1.5
sampleSdDiff_g2 <- 1.8
pve <- ((n_g1 -1) sampleSdDiff_g1^2 + (n_g2 -1) sampleSdDiff_g2^2)/(n_g1 + n_g2 -2)
round(pve,2)
n_g1 <- 9
n_g2 <- 9
sampleMeanDiff_g1 <- 3
sampleMeanDiff_g2 <- 1
sampleSdDiff_g1 <- 1.5
sampleSdDiff_g2 <- 1.8
pve <- ((n_g1 -1) * sampleSdDiff_g1^2 + (n_g2 -1) * sampleSdDiff_g2^2)/(n_g1 + n_g2 -2)
round(pve,2)
